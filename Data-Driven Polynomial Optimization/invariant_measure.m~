% -------------------------------------------------------------------------
% Identifying invariant measures from Data
%
% The goal of the script is to use the approximated Lie derivative from
% data to identify invariant measures of the underlying system. We apply
% this method to the chaotic quadratic mapping
%
%           x_{n+1} = 2x_n^2 - 1
%
% and identify both physical and atomic measures. 
% 
% The saved MATLAB file AtomicMeasures.mat contains approximations of the
% atomic measure localized the fixed point x = -0.5 for maxDp = 5,10,20.
% 
% To run this notebook one requires paths to the freely available software
% packages YALMIP and MOSEK. YALMIP can be downloaded at:
%           https://yalmip.github.io/download/
% and MOSEK can be downloaded at:
%           https://www.mosek.com/downloads/
%
% This script accompanies Section 4.5 of Data-Driven Methods for
% Dynamic Systems.
%
% Written by J. Bramburger.
%
% -------------------------------------------------------------------------

% Clean workspace
clear; 
close all; 
clc
yalmip clear
format long

%% Method Parameters 
% maxDp = max degree of Dp dictionary of obserables (alpha parameter)
% maxDq = max degree of Dq dictionary of obserables (beta parameter)
maxDp = 20;
maxDq = 2*maxDp;

%% Generate synthetic data

% Number of data points
N = 1e4;

% Iterate quadratic map from random initial condition
xdat = zeros(N,1);
xdat(1) = rand;
for n = 1:N
    xdat(n+1) = 2*xdat(n)^2 - 1; % f(x) = 2*x^2 - 1
end

% Data matrices
ydat = xdat(2:end);
xdat = xdat(1:end-1);

%% Computed moments from data 
% --> odd moments are zero in the limit N --> infinity

moment1 = sum(xdat)/N
moment3 = sum(xdat.^3)/N
moment5 = sum(xdat.^5)/N
moment7 = sum(xdat.^7)/N
moment9 = sum(xdat.^9)/N

%% Create P and Q matrices

% Q matrix
pow = monpowers(1,maxDq);
ell = size(pow,1); % number of nontrivial monomials in Q
Q = zeros(ell,N);
for i = 1:ell
   zx = xdat.^pow(i,:);
   Q(i,:) = prod(zx,2);
end

% P matrix
pow = monpowers(1,maxDp);
m = size(pow,1); % number of nontrivial monomials in P
P = zeros(m,N);
for i = 1:m
   zy = ydat.^pow(i,:);
   P(i,:) = prod(zy,2)';
end

%% Create Koopman and Lie derivative matrix approximations

% Koopman approximation
K = P*pinv(Q);
thresh = 0.01; % threshold out small values for interpretability
K(abs(K) < thresh) = 0;

% Lie derivative
Lie = K - eye(size(K));

%% Create moment matrices

% moments
y = sdpvar(maxDq+1,1);

% Create moment matrix
di = floor(maxDq/2) - 1;
for i = 1:maxDp + 1
    for j = 1:maxDp+1
        
        % positivity of moments
        M0(i,j) = y(i + (j-1));
        
        % positivity of moments with respect to the domain
        if i <= di && j <= di
            M1(i,j) = y(i + (j-1)) - y(i + (j-1) + 2);
        end
    end
end

%% Optimization procedure

% Constraints and objectives for minimization task
csntr = [y(1) == 1; Lie*y == 0; M0 >= 0; M1 >= 0];
obj = sum(y(2:2:end).^2); % enforce even symmetry

% SOS solver
optimize(csntr,obj,[])

%% Moment matrix of Lesbesgue measure

x = sdpvar(1,1);
v = monolist(x,maxDq);
ML = v*v';
ML = value(int(ML,x,-1,1));
ybar = zeros(length(y),1);
ybar(1:maxDp+1) = value(y(1:maxDp+1));

%% Get the invariant measure back

% Symbolic representation of the measure
qk = inv(ML + 1e-2*eye(size(ML)))*value(y);
meas = v'*qk;

% For plotting the measure
xplt = linspace(-1+1e-6,1-1e-6,10000);
measPlt = zeros(size(xplt)); 

for i = 1:length(v)
   measPlt = measPlt + qk(i)*xplt.^(i-1); 
end

%% Plot resulting invariant measure

% Exact invariant measure
measExact = (1/pi)./sqrt(1 - xplt.^2);

figure(1)
plot(xplt,measExact,'--','Color',[1 69/255 79/255],'LineWidth',3)
hold on
plot(xplt,measPlt,'Color',[36/255 122/255 254/255],'LineWidth',4)
axis([-1 1 0 4])
xlabel('$x$','interpreter','latex')
legend('Exact','Discovered','Location','Best','interpreter','latex','FontSize',20)
set(gca,'FontSize',16)

%% Optimization procedure for discovering (approximately) atomic measures

% Constraints and objectives for minimization task
trace_max = 1.5;
trace_min = 0;
csntr = [y(1) == 1; Lie*y == 0; M0 >= 0; M1 >= 0; trace(M0) <= trace_max, trace(M0) >= trace_min];
obj = sum((diag(M0)).^2); % trace minimization
obj = y(2)^2;

% SOS solver
optimize(csntr,obj,[])

% Find atoms
mins = extractminimizers(value(M0),[0:maxDp]');

%% Symbolic representation of the measure
qk = inv(ML + 1e-10*eye(size(ML)))*value(y);
meas = v'*qk;

% For plotting the measure
xplt = linspace(-1+1e-6,1-1e-6,10000);
measPlt = zeros(size(xplt)); 

for i = 1:length(v)
   measPlt = measPlt + qk(i)*xplt.^(i-1); 
end

figure(2)
plot(xplt,measPlt,'Color',[36/255 122/255 254/255],'LineWidth',4)
xlabel('$x$','interpreter','latex')
set(gca,'FontSize',16)

%% Plot atomic measures results

load AtomicMeasures.mat

figure(3)
plot(xplt,measPltal5,'Color',[0 168/255 0],'LineWidth',4)
hold on 
plot(xplt,measPltal10,'Color',[1 69/255 79/255],'LineWidth',4)
plot(xplt,measPltal20,'Color',[36/255 122/255 254/255],'LineWidth',4)
xlabel('$x$','interpreter','latex')
legend('$\alpha = 5$','$\alpha = 10$','$\alpha = 20$','Location','Best','interpreter','latex','FontSize',20)
set(gca,'FontSize',16)

