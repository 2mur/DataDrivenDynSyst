The Python scripts in this folder come from Craig Gin's PDEKoopman2 GitHub repository. The repo can be found at: https://github.com/CraigGin/PDEKoopman2. The reader is directed to Gin's repository for a more complete explanation of the script functions. Furthermore, this repository accompanies the paper "Deep Learning Models for Global Coordinate Transformations that Linearise PDEs" by Craig Gin, Bethany Lusch, Steven L. Brunton, and J. Nathan Kutz. The goal of this manuscript is to use autoencoders to discover optimal Koopman eigenfunctions that can be used to linearize a PDE system. Much of this work is summarized in Section 6.3 of the text "Data-Driven Methods for Dynamic Systems", but the reader is referred to Gin et al. for a more comprehensive investigation.

Minor adjustments to NetworkArch.py were made by Bethany Lusch to allow for eigenvalues of the Koopman operator that depend on the radius of the linearized variables. These variables are denoted as y_1 and y_2 in the text, and the indication that we are using a parameterized linear system is indicated by printing "using parameterized L" during network training.

The notebook Kepler_train.ipynb uses the Python scripts to generate training data and train an autoencoder neural network that discovers action-angle variables for the Kepler (2-body) problem. Generated training data is saved as Kepler_expt_... in this folder and trained autoencoders are saved in the folder "results".